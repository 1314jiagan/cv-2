{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","warp","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","key","class","add","className","classList","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.05b4e6c2.map","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n  create(string) {\r\n    const container = document.createElement(\"template\"); //template中可以1存放任意标签\r\n    container.innerHTML = string.trim(); //trim函数的功能就是将字符串两边的空格去掉\r\n    return container.content.firstChild; //content.firstChild配合template使用\r\n  },\r\n  after(node, node2) {\r\n    node.parentNode.insertBefore(node2, node.nextSibling); //将node2插入到node的后面\r\n  },\r\n  before(node, node2) {\r\n    node.parentNode.insertBefore(node2, node); //将node2插入到node的前面\r\n  },\r\n  append(parent, node) {\r\n    parent.appendChild(node); //在parent里增加node节点\r\n  },\r\n  warp(node, parent) {\r\n    dom.before(node, parent); //将node插入到parent前面 div node里增加一个parent，将node插入到parent前面，再将\r\n    dom.append(parent, node); //在parent里增加node节点\r\n  },\r\n  remove(node) {\r\n    node.parentNode.removeChild(node);\r\n    return node; //移除节点\r\n  },\r\n  empty(node) {\r\n    // const childNodes = node.childNodes; //const{childNodes}=node;\r\n    const array = [];\r\n    // for (let i = 0; i < childNodes.length; i++) {\r\n    //   dom.remove(childNodes[i]);\r\n    //   array.push(childNodes[i]);\r\n    // }\r\n    let x = node.firstChild;\r\n    while (x) {\r\n      array.push(dom.remove(node.firstChild));\r\n      x = node.firstChild;\r\n    }\r\n    return array; //清空里面的节点并且得到里面的节点\r\n  },\r\n  attr(node, name, value) {\r\n    //重载\r\n    if (arguments.length === 3) {\r\n      node.setAttribute(name, value);\r\n    } else if (arguments.length === 2) {\r\n      return node.getAttribute(name);\r\n    }\r\n  },\r\n  text(node, string) {\r\n    //适配\r\n    if (arguments.length === 2) {\r\n      if (\"innerText\" in node) {\r\n        node.innerText = string;\r\n      } //ie\r\n      else {\r\n        node.textContent = string; //firefox/chrome\r\n      }\r\n    } else if (arguments.length === 1) {\r\n      if (\"innerText\" in node) {\r\n        return node.innerText;\r\n      } //ie\r\n      else {\r\n        return node.textContent; //firefox/chrome\r\n      }\r\n    }\r\n  },\r\n  html(node, string) {\r\n    if (arguments.length === 2) {\r\n      node.innerHTML = string;\r\n    } else if (arguments.length === 1) {\r\n      return node.innerHTML;\r\n    }\r\n  },\r\n  style(node, name, value) {\r\n    if (arguments.length === 3) {\r\n      //dom.style(dom,\"color\",\"red\")\r\n      node.style[name] = value;\r\n    } else if (arguments.length === 2) {\r\n      if (typeof name === \"string\") {\r\n        //dom.style(dom,\"color\")\r\n        return node.style[name];\r\n      } else if (name instanceof Object) {\r\n        //dom.style(div,{color:red})\r\n        //判断name是否是object类型\r\n        for (let key in name) {\r\n          //object里所有的key都读到\r\n          node.style[key] = name[key]; //变量做key要放[]里，本来是style.border\r\n        }\r\n      }\r\n    }\r\n  },\r\n  class: {\r\n    add(node, className) {\r\n      node.classList.add(className);\r\n    },\r\n    remove(node, className) {\r\n      node.classList.remove(className);\r\n    },\r\n    contains(node, className) {\r\n      return node.classList.contains(className);\r\n    },\r\n  },\r\n  on(node, eventName, fn) {\r\n    node.addEventListener(eventName, fn);\r\n  },\r\n  off(node, eventName, fn) {\r\n    node.removeEventListener(eventName, fn);\r\n  },\r\n  find(selector, scope) {\r\n    //scope查找的范围\r\n    return (scope || document).querySelectorAll(selector);\r\n  },\r\n  parent(node) {\r\n    return node.parentNode;\r\n  },\r\n  children(node) {\r\n    return node.children;\r\n  },\r\n  siblings(node) {\r\n    return Array.from(node.parentNode.children).filter((n) => n !== node); //node.parentNode.children伪数组,利用Array.from转成数组，再利用filter过滤\r\n  },\r\n  next(node) {\r\n    let x = node.nextSibling;\r\n    while (x && x.nodeType === 3) {\r\n      x = x.nextSibling;\r\n    }\r\n    return x;\r\n  },\r\n  previous(node) {\r\n    let x = node.previousSibling;\r\n    while (x && x.nodeType === 3) {\r\n      x = x.previousSibling;\r\n    }\r\n    return x;\r\n  },\r\n  each(nodeList, fn) {\r\n    for (let i = 0; i < nodeList.length; i++) {\r\n      fn.call(null, nodeList[i]);\r\n    }\r\n  },\r\n  index(node) {\r\n    const list = dom.children(node);\r\n    let i;\r\n    for (i = 0; i < list.length; i++) {\r\n      if (list[i] === node) {\r\n        break;\r\n      }\r\n    }\r\n    return i;\r\n  },\r\n};\r\n//const 定义的变量不可以修改\r\n//var定义的变量可以修改,如果不初始化会输出undefined,不会报错。\r\n//let  函数内定义,与外界无关\r\n"]}